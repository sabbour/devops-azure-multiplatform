{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "registryName": {
            "type": "string",
            "metadata": {
                "description": "The name of the container registry."
            }
        },
        "appImageName": {
            "type": "string",
            "metadata": {
                "description": "The name of application (used for docker image name)."
            }
        },
        "webAppName": {
            "type": "string",
            "metadata": {
                "description": "The name of Web App (used also for DNS name for web app *.azurewebsites.net)."
            }
        },
        "postgresName": {
            "type": "string",
            "metadata": {
                "description": "The name of Postgre SQL database."
            }
        },
        "postgresAdministratorLogin": {
            "type": "string",
            "metadata": {
                "description": "Administrator login for Postgre SQL database."
            }
        },
        "postgresAdministratorLoginPassword": {
            "type": "string",
            "metadata": {
                "description": "Administrator login password for Postgre SQL database."
            }
        },
        "jenkinsName": {
            "type": "string",
            "metadata": {
                "description": "Name of Jenkins instance (also used like DNS prefix for Azure DNS name)."
            }
        },
        "jenkinsAdminUsername": {
            "type": "string",
            "metadata": {
                "description": "Username for Jenkins operating system."
            }
        },
        "jenkinsSshPublicKey": {
            "type": "string",
            "metadata": {
                "description": "SSH public key for Jenkins operating system Username."
            }
        }
    },
    "variables": {
        "jenkisInstallType": "verified",
        "appInsightsName": "[concat(parameters('webAppName'),'APPINSIGHT')]",
        "virtualMachineName": "[parameters('jenkinsName')]",
        "virtualMachineSize": "Standard_DS2_v2",
        "virtualNetworkName": "[concat(parameters('jenkinsName'),'Network')]",
        "networkInterfaceName": "[concat(parameters('jenkinsName'),'NIC')]",
        "networkSecurityGroupName": "[concat(parameters('jenkinsName'),'NSG')]",
        "addressPrefix": "10.1.0.0/24",
        "subnetName": "[concat(parameters('jenkinsName'),'NetworkSubnet')]",
        "subnetPrefix": "10.1.0.0/24",
        "publicIpAddressName": "[concat(parameters('jenkinsName'),'IP')]",
        "publicIpAddressType": "Dynamic",
        "vnetId": "[resourceId(resourceGroup().name,'Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', variables('subnetName'))]",
        "fileUris": "https://raw.githubusercontent.com/valda-z/devops-azure-multiplatform/java/src/main/jenkins/setup.sh",
        "jenkinsGitUrl": "https://github.com/valda-z/devops-azure-multiplatform.git",
        "jenkinsGitBranch": "java",
        "postgresDatabaseName": "tododb"
    },
    "resources": [{
            "name": "[parameters('registryName')]",
            "type": "Microsoft.ContainerRegistry/registries",
            "location": "[resourceGroup().location]",
            "apiVersion": "2017-06-01-preview",
            "sku": {
                "name": "Managed_Standard"
            },
            "properties": {
                "adminUserEnabled": "true"
            }
        },
        {
            "apiVersion": "2014-04-01",
            "dependsOn": [],
            "kind": "web",
            "location": "[resourceGroup().location]",
            "name": "[variables('appInsightsName')]",
            "properties": {
                "ApplicationId": "[variables('appInsightsName')]"
            },
            "scale": null,
            "tags": {},
            "type": "microsoft.insights/components"
        },
        {
            "apiVersion": "2017-04-30-preview",
            "type": "Microsoft.DBforPostgreSQL/servers",
            "kind": "",
            "location": "[resourceGroup().location]",
            "name": "[parameters('postgresName')]",
            "properties": {
                "version": "9.6",
                "administratorLogin": "[parameters('postgresAdministratorLogin')]",
                "administratorLoginPassword": "[parameters('postgresAdministratorLoginPassword')]",
                "storageMB": "51200"
            },
            "sku": {
                "capacity": "50",
                "family": "SkuFamily",
                "name": "PGSQLB50",
                "size": "51200",
                "tier": "Basic"
            },
            "resources": [{
                    "apiVersion": "2017-04-30-preview",
                    "name": "[variables('postgresDatabaseName')]",
                    "type": "databases",
                    "location": "[resourceGroup().location]",
                    "tags": {
                        "displayName": "PSQLDatabase"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.DBforPostgreSQL/servers', parameters('postgresName'))]"
                    ],
                    "properties": {}
                },
                {
                    "apiVersion": "2017-04-30-preview",
                    "name": "PSQLServerFirewallRule",
                    "type": "firewallrules",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[resourceId('Microsoft.DBforPostgreSQL/servers', parameters('postgresName'))]"
                    ],
                    "properties": {
                        "endIpAddress": "255.255.255.255",
                        "startIpAddress": "0.0.0.0"
                    }
                }
            ]
        },
        {
            "apiVersion": "2016-03-01",
            "name": "[parameters('webAppName')]",
            "type": "Microsoft.Web/sites",
            "properties": {
                "name": "[parameters('webAppName')]",
                "siteConfig": {
                    "appSettings": [{
                            "name": "PORT",
                            "value": "8080"
                        },
                        {
                            "name": "POSTGRESQLSERVER_URL",
                            "value": "[concat('jdbc:postgresql://',parameters('postgresName'),'.postgres.database.azure.com:5432/',variables('postgresDatabaseName'),'?user=',parameters('postgresAdministratorLogin'),'@',parameters('postgresName'),'&password=',parameters('postgresAdministratorLoginPassword'),'&ssl=true')]"
                        },
                        {
                            "name": "DOCKER_CUSTOM_IMAGE_NAME",
                            "value": "[concat(reference(resourceId('Microsoft.ContainerRegistry/registries',parameters('registryName'))).loginServer,'/',parameters('appImageName'),':latest')]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_URL",
                            "value": "[concat('https://',reference(resourceId('Microsoft.ContainerRegistry/registries',parameters('registryName'))).loginServer)]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                            "value": "[parameters('registryName')]"
                        },
                        {
                            "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                            "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries',parameters('registryName')),'2017-03-01').passwords[0].value]"
                        },
                        {
                            "name": "APPLICATION_INSIGHTS_IKEY",
                            "value": "[reference(resourceId('microsoft.insights/components', variables('appInsightsName')), '2014-04-01').InstrumentationKey]"
                        }
                    ],
                    "appCommandLine": "",
                    "linuxFxVersion": "[concat('DOCKER|',reference(resourceId('Microsoft.ContainerRegistry/registries',parameters('registryName'))).loginServer,'/',parameters('appImageName'),':latest')]"
                },
                "serverFarmId": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('webAppName'))]",
                "hostingEnvironment": ""
            },
            "location": "[resourceGroup().location]",
            "tags": {
                "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', parameters('webAppName'))]": "empty"
            },
            "dependsOn": [
                "[concat('Microsoft.Web/serverfarms/', parameters('webAppName'))]",
                "[concat('Microsoft.ContainerRegistry/registries/', parameters('registryName'))]",
                "[resourceId('microsoft.insights/components', variables('appInsightsName'))]"
            ]
        },
        {
            "apiVersion": "2016-09-01",
            "name": "[parameters('webAppName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[resourceGroup().location]",
            "properties": {
                "name": "[parameters('webAppName')]",
                "workerSizeId": "0",
                "reserved": true,
                "numberOfWorkers": "1",
                "hostingEnvironment": ""
            },
            "sku": {
                "Tier": "Standard",
                "Name": "S1"
            },
            "kind": "linux"
        },
        {
            "name": "[variables('virtualMachineName')]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2016-04-30-preview",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', variables('networkInterfaceName'))]"
            ],
            "properties": {
                "osProfile": {
                    "computerName": "[variables('virtualMachineName')]",
                    "adminUsername": "[parameters('jenkinsAdminUsername')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "true",
                        "ssh": {
                            "publicKeys": [{
                                "path": "[concat('/home/', parameters('jenkinsAdminUsername'), '/.ssh/authorized_keys')]",
                                "keyData": "[parameters('jenkinsSshPublicKey')]"
                            }]
                        }
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[variables('virtualMachineSize')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "16.04-LTS",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "fromImage",
                        "managedDisk": {
                            "storageAccountType": "Premium_LRS"
                        }
                    },
                    "dataDisks": []
                },
                "networkProfile": {
                    "networkInterfaces": [{
                        "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                    }]
                }
            },
            "resources": [{
                "type": "extensions",
                "name": "[concat(parameters('jenkinsName'),'-installscript')]",
                "apiVersion": "2015-06-15",
                "location": "[resourceGroup().location]",
                "dependsOn": [
                    "[concat('Microsoft.Compute/virtualMachines/', parameters('jenkinsName'))]"
                ],
                "properties": {
                    "publisher": "Microsoft.Azure.Extensions",
                    "type": "CustomScript",
                    "typeHandlerVersion": "2.0",
                    "autoUpgradeMinorVersion": true,
                    "settings": {
                        "fileUris": "[split(variables('fileUris'), ' ')]",
                        "commandToExecute": "[concat('./setup.sh', ' --jenkins_fqdn \"',reference(resourceId('Microsoft.Network/publicIpAddresses', variables('publicIpAddressName'))).dnsSettings.fqdn,'\" --jenkins_release_type \"',variables('jenkisInstallType'),'\" --git_url \"',variables('jenkinsGitUrl'),'\" --git_branch \"',variables('jenkinsGitBranch'),'\" --registry \"',reference(resourceId('Microsoft.ContainerRegistry/registries',parameters('registryName'))).loginServer,'\" --registry_user_name \"',parameters('registryName'),'\" --registry_password \"',listCredentials(resourceId('Microsoft.ContainerRegistry/registries',parameters('registryName')),'2017-03-01').passwords[0].value,'\" --docker_imagename \"',parameters('appImageName'),'\"')]"
                    }
                }
            }]
        },
        {
            "name": "[variables('virtualNetworkName')]",
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2016-12-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [{
                    "name": "[variables('subnetName')]",
                    "properties": {
                        "addressPrefix": "[variables('subnetPrefix')]"
                    }
                }]
            }
        },
        {
            "name": "[variables('networkInterfaceName')]",
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2016-09-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
                "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddressName'))]",
                "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
            ],
            "properties": {
                "ipConfigurations": [{
                    "name": "ipconfig1",
                    "properties": {
                        "subnet": {
                            "id": "[variables('subnetRef')]"
                        },
                        "privateIPAllocationMethod": "Dynamic",
                        "publicIpAddress": {
                            "id": "[resourceId(resourceGroup().name,'Microsoft.Network/publicIpAddresses', variables('publicIpAddressName'))]"
                        }
                    }
                }],
                "networkSecurityGroup": {
                    "id": "[resourceId(resourceGroup().name, 'Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
                }
            }
        },
        {
            "name": "[variables('publicIpAddressName')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2017-08-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIpAllocationMethod": "[variables('publicIpAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[parameters('jenkinsName')]"
                }
            }
        },
        {
            "name": "[variables('networkSecurityGroupName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2016-09-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [{
                        "name": "default-allow-ssh",
                        "properties": {
                            "priority": 1000,
                            "sourceAddressPrefix": "*",
                            "protocol": "TCP",
                            "destinationPortRange": "22",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*"
                        }
                    },
                    {
                        "name": "default-allow-http",
                        "properties": {
                            "priority": 1001,
                            "sourceAddressPrefix": "*",
                            "protocol": "TCP",
                            "destinationPortRange": "80",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*"
                        }
                    },
                    {
                        "name": "default-allow-8080",
                        "properties": {
                            "priority": 1002,
                            "sourceAddressPrefix": "*",
                            "protocol": "TCP",
                            "destinationPortRange": "8080",
                            "access": "Allow",
                            "direction": "Inbound",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*"
                        }
                    }
                ]
            }
        }
    ],
    "outputs": {
        "registryServer": {
            "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries',parameters('registryName'))).loginServer]",
            "type": "string"
        },
        "registryUsername": {
            "value": "[parameters('registryName')]",
            "type": "string"
        },
        "registryPassword": {
            "type": "string",
            "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries',parameters('registryName')),'2017-03-01').passwords[0].value]"
        }
    }
}